class Solution {
public:
    bool canJump(vector<int>& nums) {
        int target = nums.size() - 1;
        int cur_max_reach = nums[0];
        for(int i = 0; i < nums.size(); i++){
            if(cur_max_reach < i) return false;
            cur_max_reach = max(cur_max_reach, i + nums[i]);
            if(cur_max_reach >= target) return true;
        }
        return cur_max_reach >= target;
    }
};

class Solution:
    def canJump(self, nums: List[int]) -> bool:
        maxReach = nums[0]
        currentReach = 0
        for i, jump in enumerate(nums):
            if i > maxReach:
                return False
            maxReach = max(maxReach, i + jump)
            if maxReach >= len(nums) - 1:
                return True
        return False

Time Complexity: O(N)
Space Complexity: O(1)

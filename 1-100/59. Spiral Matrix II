/**
 * @param {number} n
 * @return {number[][]}
 */
var generateMatrix = function(n) {
    let directions = [0,1,0,-1,0];
    let res = Array.from({length: n}, () => new Array(n).fill(-1));
    let index = 0;
    let r = 0, c = 0;
    let totalEl = n * n;
    let current = 1;
    while(current <= totalEl){
        res[r][c] = current;
        current += 1;
        let new_r = r + directions[index];
        let new_c= c + directions[index+1];
        if(new_r < 0 || new_r >= n || new_c < 0 || new_c >= n || res[new_r][new_c] > 0){
            index = (index + 1) % 4;
        }
        r = r + directions[index];
        c = c + directions[index+1];
    }
    return res;
};

Time Complexity: O(N^2)
Space Complexity: O(1)

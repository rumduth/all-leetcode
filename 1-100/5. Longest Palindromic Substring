class Solution {
public:
    string longestPalindrome(string s) {
        int n = s.length();
        int start = 0;
        int maxLength = 1;
        vector<vector<bool>> dp(n,vector<bool>(n, true));
        for(int i = n - 2; i >= 0; i--){
            for(int j = i + 1; j < n; j++){
                dp[i][j] = dp[i+1][j-1] && s[i] == s[j];
                if(dp[i][j]){
                    if(j - i + 1 > maxLength){
                        start = i;
                        maxLength = j - i + 1;
                    }
                }
            }
        }
        return s.substr(start, maxLength);
    }
};


class Solution:
    def longestPalindrome(self, s: str) -> str:
        n = len(s)
        dp = [[True] * n for _ in range(n)]
        maxLength = 1
        start = 0
        for i in range(n - 2,-1,-1):
            for j in range(i + 1, n):
                dp[i][j] = dp[i+1][j-1] and s[i] == s[j]
                if dp[i][j] and maxLength < j - i + 1:
                    maxLength = j - i + 1
                    start = i
        return s[start:start+maxLength]

Time Complexity: O(N^2)
Space Complexity: O(N^2)

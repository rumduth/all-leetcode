class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int n = nums.size();
        if(n <= 1) return;
        int i = n - 2;
        while(i >= 0 && nums[i] >= nums[i+1]) i -= 1;
        if(i < 0){
            reverse(nums.begin(),nums.end());
            return;
        }
        int j = i + 1;
        while(j < n && nums[j] > nums[i]) j++;
        j-=1;
        swap(nums[i],nums[j]);
        reverse(nums.begin() + i + 1, nums.end());
        return;
    }
};

class Solution:
    def nextPermutation(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        n = len(nums)
        if n <= 1:
            return
        i = n - 2
        while i >= 0 and nums[i] >= nums[i+1]:
            i -= 1
        if i < 0:
            nums.reverse()
            return
        
        j = i + 1
        while j < n and nums[j] > nums[i]:
            j += 1
        j -= 1
        nums[i], nums[j] = nums[j], nums[i]
        nums[i+1:] = reversed(nums[i+1:])
        return
        


Time Complexity: O(N)
Space Complexity: O(1)


class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        vector<vector<int>> res;
        int n = nums.size();
        for(int i = 0; i < n; i++){
            if(i > 0 && nums[i] == nums[i-1]) continue;
            int j = i + 1;
            int k = n - 1;
            int target = -nums[i];
            while(j < k){
                if(nums[j] + nums[k] == target){
                    res.push_back({nums[i],nums[j],nums[k]});
                    j += 1;
                    k -= 1;
                    while(j < k && nums[j] == nums[j-1]) j += 1;
                    while(j < k && nums[k] == nums[k+1]) k -= 1;
                }else if(nums[j] + nums[k] > target) k -= 1;
                else j += 1;
            } 
        }
        return res;
    }
};
class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        nums.sort()
        res = []
        n = len(nums)
        for i in range(n-2):
            if i > 0 and nums[i-1] == nums[i]:
                continue
            j = i + 1
            k = n - 1
            target = -nums[i]
            while j < k:
                if nums[j] + nums[k] == target:
                    res.append([nums[i],nums[j],nums[k]])
                    j += 1
                    k -= 1
                    while j < k and nums[j] == nums[j-1]:
                        j += 1
                    while k > j and nums[k] == nums[k+1]:
                        k -= 1
                elif nums[j] + nums[k] > target:
                    k -= 1
                else:
                    j += 1
        return res

Time Complexity: O(N^2)
Space Complexity: O(1)

class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> res;
        sort(nums.begin(),nums.end());
        int n = nums.size();
        for(int a = 0; a < n; a++){
            if(a > 0 && nums[a] == nums[a-1]) continue;
            for(int b = a + 1; b < n; b++){
                if(b > a + 1 && nums[b] == nums[b-1]) continue;
                int c = b + 1;
                int d = n - 1;
                while(c < d){
                    if(1ll * nums[a] + nums[b] + nums[c] + nums[d] == target){
                    res.push_back({nums[a],nums[b],nums[c],nums[d]});
                    c += 1;
                    d -= 1;
                    while(c < d && nums[c] == nums[c-1]) c++;
                    while(d > c && nums[d] == nums[d+1]) d--;
                    }else if(1ll * nums[a] + nums[b] + nums[c] + nums[d] > target) d--;
                    else c += 1;
                }
            }
        }
        return res;
    }
};


Time Complexity: O(N^3)
Space Complexity: O(1)

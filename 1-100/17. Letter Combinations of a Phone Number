class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        if not digits:
            return []
        digit_map_letter = {
            "2": "abc",
            "3": "def",
            "4": "ghi",
            "5": "jkl",
            "6": "mno",
            "7": "pqrs",
            "8": "tuv",
            "9": "wxyz"
        }
        res = []
        def dfs(i,s):
            if i == len(digits):
                res.append(s)
                return 
            for c in digit_map_letter[digits[i]]:
                dfs(i+1, s + c)
        
        dfs(0,"")
        return res

class Solution {
public:
    vector<string> letterCombinations(string digits) {
        if(digits.length() == 0) return {};
        unordered_map<char, string> digit_map_letter = {
            {'2', "abc"},
            {'3',"def"},
            {'4',"ghi"},
            {'5',"jkl"},
            {'6',"mno"},
            {'7',"pqrs"},
            {'8',"tuv"},
            {'9',"wxyz"},
        };
        vector<string> res;
        function<void(int, string)> dfs = [&](int i, string s){
            if(i == digits.length()){
                res.push_back(s);
                return;
            }
            for(auto c : digit_map_letter[digits[i]]) dfs(i+1,s + c);
        };
        dfs(0,"");
        return res;
    }
};

Time Complexity: O(N * 4^N)
Space Complexity: O(N * 4^N)

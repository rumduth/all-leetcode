Dynamic Programming Approach

class Solution:
    def longestValidParentheses(self, s: str) -> int:
        n = len(s)
        dp = [0] * (n + 1)

        res = 0

        for i in range(2, n + 1):
            if s[i-1] == '(':
                continue
            if s[i-2] == '(':
                dp[i] = 2 + dp[i-2]
            else:
                current_valid_length = dp[i-1]
                index = i - 1 - current_valid_length - 1
                if index >= 0 and s[index] == '(':
                    dp[i] = 2 + current_valid_length + dp[index]
            res = max(res, dp[i])
        
        return res

Stack Approach:
class Solution {
public:
    int longestValidParentheses(string s) {
        stack<int> st;
        st.push(-1);
        int res = 0;
        for(int i = 0; i < s.length(); i++){
            if(s[i] == '('){
                st.push(i);
                continue;
            }
            st.pop();
            if(st.empty()) st.push(i);
            res = max(res, i - st.top());
        }
        return res;
    }
};


Time Complexity: O(N)
Space Complexity: O(N)

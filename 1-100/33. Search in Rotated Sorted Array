class Solution {
public:
    int search(vector<int>& nums, int target) {
        int left = 0;
        int right = nums.size() - 1;
        while(left < right){
            int m = (left + right) >> 1;
            if(nums[m] == target) return m;
            if(nums[m] >= nums[left]){
                if(target < nums[m] && target >= nums[left]) right = m - 1;
                else left = m + 1;
            }else{
                if(target > nums[m] && target <= nums[right]) left = m + 1;
                else right = m - 1;
            }
        }
        if(nums[left] == target) return left;
        return -1;
    }
};


class Solution:
    def search(self, nums: List[int], target: int) -> int:
        left, right = 0, len(nums) - 1
        while left < right:
            m = (left + right) >> 1
            if nums[m] == target:
                return m
            if nums[m] >= nums[left]:
                if target >= nums[left] and target < nums[m]:
                    right = m - 1
                else:
                    left = m + 1
            else:
                if target > nums[m] and target <= nums[right]:
                    left = m + 1
                else:
                    right = m - 1
        
        return -1 if nums[left] != target else left


Time Complexity: O(LogN)
Space Complexity: O(1)

class Solution {
public:
    int firstMissingPositive(vector<int>& nums) {
        int n = nums.size();
        for(int i = 0; i < nums.size(); i++){
            while(nums[i] >= 1 && nums[i] <= n && nums[i] != (i + 1)){
                if(nums[i] == nums[nums[i]-1]) break;
                swap(nums[i],nums[nums[i]-1]);
            }
        }
        for(int i = 0; i < nums.size(); i++){
            if(nums[i] != i + 1) return i + 1;
        }
        return n + 1;
    }
};

class Solution:
    def firstMissingPositive(self, nums: List[int]) -> int:
        n = len(nums)
        for i in range(n):
            while nums[i] >= 1 and nums[i] <= n and i + 1 != nums[i]:
                if nums[i] == nums[nums[i] - 1]:
                    break
                swap_index = nums[i] - 1
                nums[i], nums[swap_index] = nums[swap_index], nums[i]
        
        for i in range(n):
            if nums[i] != i + 1:
                return i + 1
        
        return n + 1

Time Complexity: O(N)
Space Complexity: O(1)

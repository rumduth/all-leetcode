class Solution:
    def threeSumClosest(self, nums: List[int], target: int) -> int:
        nums.sort()
        res = 0
        diff = float('inf')
        n = len(nums)
        for i in range(n):
            if i > 0 and nums[i-1] == nums[i]:
                continue
            j = i + 1
            k = n - 1
            while j < k:
                if nums[j] + nums[k] + nums[i] == target:
                    return target
                elif nums[j] + nums[k] + nums[i] > target:
                    if diff > abs(nums[i] + nums[j] + nums[k] - target):
                        diff = abs(nums[i] + nums[j] + nums[k] - target)
                        res = nums[j] + nums[k] + nums[i]
                    k -= 1
                else:
                    if diff > abs(nums[i] + nums[j] + nums[k] - target):
                        diff = abs(nums[i] + nums[j] + nums[k] - target)
                        res = nums[j] + nums[k] + nums[i]
                    j += 1
        
        return res

class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        sort(nums.begin(), nums.end());
        int ans;
        int diff = INT_MAX;
        for(int i = 0; i < nums.size(); i++){
            if(i > 0 && nums[i] == nums[i-1]) continue;
            int j = i + 1;
            int k = nums.size()-1;
            while(j < k){
                if(nums[i] + nums[j] + nums[k] == target)
                    return nums[i] + nums[j] +nums[k];
                else if(nums[j] + nums[k] > target - nums[i]){
                    if(abs(nums[i]+nums[j]+nums[k] - target) <= diff){
                        ans = nums[i]+nums[j]+nums[k];
                        diff = abs(nums[i]+nums[j]+nums[k] - target);
                    }
                    k--;
                }
                else{
                    if(abs(nums[i]+nums[j]+nums[k] - target) <= diff){
                        ans = nums[i]+nums[j]+nums[k];
                        diff = abs(nums[i]+nums[j]+nums[k] - target);
                    }
                    j++;
                }
            }
        }
        return ans;
    }
};

Time Complexity: O(N^2)
Space Complexity: O(1)

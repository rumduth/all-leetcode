/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int carry = 0;
        ListNode* head = nullptr;
        ListNode* current = nullptr;
        while(l1 || l2 || carry){
            int val1 = 0;
            int val2 = 0;
            if(l1) val1 = l1->val;
            if(l2) val2 = l2->val;
            int val = (val1 + val2 + carry) % 10;
            carry = (val1 + val2 + carry) / 10;
            ListNode* node = new ListNode(val);
            if(!head){
                head = current = node;
            }else{
                current->next = node;
                current = node;
            }
            if(l1) l1 = l1->next;
            if(l2) l2 = l2->next;
        }
        return head;
    }
};


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        head = None
        current = None
        carry = 0
        while l1 or l2 or carry:
            val1 = 0
            val2 = 0
            if l1: val1 = l1.val
            if l2: val2 = l2.val
            node = ListNode((val1 + val2 + carry) % 10)
            carry = (val1 + val2 + carry) // 10
            if not head:
                head = current = node
            else:
                current.next = node
                current = node
            
            if l1: l1 = l1.next
            if l2: l2 = l2.next
        return head


Time Complexity: O(N)
Space Complexity: O(1)

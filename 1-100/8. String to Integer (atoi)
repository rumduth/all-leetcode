class Solution {
  
public:
    int myAtoi(string s) {
        int sign = 1;
        long long res = 0;
        int i = 0;
        bool start = false;
        while(i < s.length()){
            if(isdigit(s[i])){
                if(!start) start = true;
                res = res * 10 + (s[i] - '0');
                i += 1;
                if(sign * res >= INT_MAX) return INT_MAX;
                if(sign * res <= INT_MIN) return INT_MIN;
            }else{
                if(start) return sign * res;
                if(s[i] == ' '){
                    i += 1;
                    continue;
                } 
                if(s[i] == '-' || s[i] == '+'){
                    if(s[i] == '-') sign *= -1;
                    start = true;
                    i += 1;
                    continue;
                }
                return sign * res;
            }
        }

        if(sign * res >= INT_MAX) return INT_MAX;
        if(sign * res <= INT_MIN) return INT_MIN;
        return sign * res;
    }
};





class Solution:
    def myAtoi(self, s: str) -> int:
        i = 0
        res = 0
        MAX_VAL = pow(2,31) - 1
        MIN_VAL = -pow(2,31)
        sign = 1
        start = False
        while i < len(s):
            if s[i].isdigit():
                if not start:
                    start = True
                res = res * 10 + ord(s[i]) - ord('0')
                if res * sign >= MAX_VAL:
                    return MAX_VAL
                if res * sign <= MIN_VAL:
                    return MIN_VAL
                i += 1
            else:
                if start:
                    return sign * res
                if s[i] == ' ':
                    i += 1
                    continue
                if s[i] == '+' or s[i] == '-':
                    if s[i] == '-':
                        sign = -1
                    start = True
                    i += 1
                    continue
                return sign * res
        
        if res * sign >= MAX_VAL:
            return MAX_VAL
        if res * sign <= MIN_VAL:
            return MIN_VAL
        return res * sign

Time Complexity: O(N)
Space Complexity: O(1)

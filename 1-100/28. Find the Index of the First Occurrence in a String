KMP Algorithm

class Solution {
private:
    vector<int> build_kmp(string& s){
        int n = s.length();
        vector<int> pi(n,0);
        for(int i = 1; i < n; i++){
            int j = pi[i-1];
            while(j > 0 && s[i] != s[j]) j = pi[j-1];
            if(s[i] == s[j]) j += 1;
            pi[i] = j;
        }
        return pi;
    }
public:
    int strStr(string s, string pattern) {
        auto lps = build_kmp(pattern);
        int i = 0;
        int j = 0;
        while(i < s.length()){
            if(s[i] == pattern[j]){
                i += 1;
                j += 1;
                if(j == pattern.length())
                    return i - j;
                continue;
            }
            if(j > 0){
                j = lps[j-1];
            }else
                i += 1;
        }
        return -1;
        
    }
};


class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        def build_lps(needle):
            lps = [0] * len(needle)
            for i in range(1, len(needle)):
                j = lps[i-1]
                while j > 0 and needle[i] != needle[j]:
                    j = lps[j-1]
                if needle[i] == needle[j]:
                    j += 1
                lps[i] = j
            return lps

        lps = build_lps(needle)
        i = 0
        j = 0
        while i < len(haystack):
            if haystack[i] == needle[j]:
                i += 1
                j += 1
                if j == len(needle):
                    return i - len(needle)
                continue
            if j > 0:
                j = lps[j-1]
            else:
                i += 1
        
        return -1

Time Complexity: O(m + n)
Space Complexity: O(n)

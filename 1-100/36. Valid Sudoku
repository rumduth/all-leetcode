class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        vector<vector<int>> row(9,vector<int>(9,0));
        vector<vector<int>> col(9,vector<int>(9,0));
        vector<vector<int>> diagonal(9,vector<int>(9,0));
        for(int i = 0; i < 9; i++){
            for(int j = 0; j < 9; j++){
                if(board[i][j] == '.') continue;
                int index = board[i][j] - '1';
                diagonal[3 * (i / 3) + j / 3][index] += 1; 
                row[i][index] += 1;
                col[j][index] += 1;
                if(row[i][index] > 1 || col[j][index] > 1 || diagonal[3 * (i / 3) + j / 3][index] > 1) return false;
            }
        }
        return true;
    }
};

class Solution:
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        row = [[0] * 9 for _ in range(9)]
        col = [[0] * 9 for _ in range(9)]
        diag = [[0] * 9 for _ in range(9)]
        for i in range(len(board)):
            for j in range(len(board[0])):
                if board[i][j] == '.':
                    continue
                index = ord(board[i][j]) - ord('1')
                row[i][index] += 1
                col[j][index] += 1
                diag[3 * math.floor(i / 3) + math.floor(j / 3)][index] += 1
                if row[i][index] > 1 or col[j][index] > 1 or  diag[3 * math.floor(i / 3) + math.floor(j / 3)][index] > 1:
                    return False
        
        return True

Time Complexity: O(1)
Space Complexity: O(1)

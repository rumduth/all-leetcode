C++
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int,int> m;
        for(int i = 0; i < nums.size(); i++){
            if(m.count(target - nums[i])) return {m[target-nums[i]],i};
            m[nums[i]] = i;
        }
        return {};
    }
};

Python
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        index_tracking = {}
        for i, num in enumerate(nums):
            if (target - num) in index_tracking:
                return [index_tracking[target - num], i]
            index_tracking[num] = i
        return []

Time Complexity: O(N)
Space Complexity: O(N)
